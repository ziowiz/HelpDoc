const styles = StyleSheet.create({
	Разберы: {
		width: 100, //Ширина
		height: 100, //Высота
		flex: 1, // Размер от части экрна (1+2+3="Значаение флекса"
		flex: 2, // Размер от части экрна (1+2+3="Значаение флекса"
		flex: 3, // Размер от части экрна (1+2+3="Значаение флекса"
	},
	flex: {
		flexDirection: {
			1: "row", // По горизонтали
			2: "column", // По вертикали
			3: "row-reverse", // По горизонтали в обратном порядке
			4: "column-reverse", // По вертикали в обратном порядке
		},
		direction: {
			1: "LTR", // Лево-Право
			2: "RTL", // Право-Лево
		},
		justifyContent: {
			1: "flex-start", // По левому краю
			2: "flex-end", // По правому краю
			3: "center", // По центру
			4: "space-between", // Расположение элементов между собой
			5: "space-around", // Расположение элементов между собой и между краями
		},
		alignItems: {
			1: "flex-start", // По верхнему краю
			2: "flex-end", // По нижнему краю
			3: "center", // По центру
			4: "baseline", // По базовой линии
			5: "stretch", // Растянуть по высоте
		},
		alignSelf: {
			//свойство к одному дочернему элементу, чтобы изменить его выравнивание внутри его родителя
			1: "auto", // По умолчанию
			2: "flex-start", // По верхнему краю
			3: "flex-end", // По нижнему краю
			4: "center", // По центру
			5: "baseline", // По базовой линии
			6: "stretch", // Растянуть по высоте
		},
		alignContent: {
			// определяет распределение линий вдоль поперечной оси. Это имеет эффект только в том случае, если элементы переносятся в несколько строк с помощью flexWrap.
			1: "flex-start", // По верхнему краю
			2: "flex-end", //Выровняйте переносимые линии по концу поперечной оси контейнера.
			3: "stretch", //( значение по умолчанию при использовании Yoga в Интернете ) Растягивайте обернутые линии, чтобы они соответствовали высоте поперечной оси контейнера.
			4: "center", //Выровняйте обернутые линии по центру поперечной оси контейнера.
			5: "space-between", //Равномерно расположите строки по поперечной оси контейнера, распределив оставшееся пространство между строками.
			6: "space-around", //Равномерно расположите линии. Каждый конец контейнера имеет пространство в половину размера по сравнению с пространством между предметами.
			7: "space-evenly", //Равномерно расположите линии. Каждое пространство одинакового размера.
		},
		flexWrap: {
			1: "wrap", // Переносит элементы в строки, если они не помещаются в одну строку
			2: "nowrap", // Переносит элементы в строки, если они не помещаются в одну строку
			3: "wrap-reverse", // Переносит элементы в строки, если они не помещаются в одну строку в обратном порядке
		},
		rowGap: 10, // Расстояние между строками
		columnGap: 10, // Расстояние между столбцами
		gap: 10, // Общий размер между элементами
		flexGrow: 1, // Увеличивает размер элемента, если он не помещается в контейнер
		flexShrink: 1, // Уменьшает размер элемента, если он не помещается в контейнер
		flexBasis: 100, // Устанавливает размер элемента, если он не помещается в контейнер
		flexBasis: "auto", // Устанавливает размер элемента, если он не помещается в контейнер
		flexBasis: "content", // Устанавливает размер элемента, если он не помещается в контейнер
	},
	// Текстовые стили
	textStyles: {
		fontSize: {
			small: 12, // Маленький текст
			medium: 16, // Средний текст
			large: 20, // Большой текст
			extraLarge: 24, // Очень большой текст
		},
		fontWeight: {
			thin: "100", // Тонкий текст
			light: "200", // Светлый текст
			normal: "400", // Нормальный текст
			bold: "700", // Жирный текст
			extraBold: "900", // Очень жирный текст
		},
		fontStyle: {
			normal: "normal", // Нормальный стиль текста
			italic: "italic", // Курсив
		},
		textAlign: {
			left: "left", // Текст выровнен по левому краю
			right: "right", // Текст выровнен по правому краю
			center: "center", // Текст по центру
			justify: "justify", // Текст по ширине
		},
		textDecoration: {
			none: "none", // Без украшений
			underline: "underline", // Подчеркивание
			lineThrough: "line-through", // Зачеркнутый
			underlineLineThrough: "underline line-through", // Подчеркивание и зачеркивание
		},
		textTransform: {
			none: "none", // Без изменений
			capitalize: "capitalize", // Первую букву каждого слова в верхний регистр
			uppercase: "uppercase", // Все буквы в верхний регистр
			lowercase: "lowercase", // Все буквы в нижний регистр
		},
		letterSpacing: 1, // Межбуквенный интервал
		lineHeight: 20, // Межстрочный интервал
	},

	// Дизайн и общие стили
	design: {
		backgroundColor: {
			primary: "#3498db", // Основной цвет фона
			secondary: "#2ecc71", // Вторичный цвет фона
			danger: "#e74c3c", // Цвет фона для предупреждений
			warning: "#f1c40f", // Цвет фона для предупреждений
			info: "#8e44ad", // Информационный цвет фона
			light: "#ecf0f1", // Светлый цвет фона
			dark: "#2c3e50", // Темный цвет фона
		},
		borderColor: {
			primary: "#2980b9", // Основной цвет границы
			secondary: "#27ae60", // Вторичный цвет границы
			danger: "#c0392b", // Цвет границы для предупреждений
			warning: "#f39c12", // Цвет границы для предупреждений
			info: "#7d3c98", // Информационный цвет границы
			light: "#bdc3c7", // Светлый цвет границы
			dark: "#34495e", // Темный цвет границы
		},
		borderWidth: {
			thin: 1, // Тонкая граница
			medium: 2, // Средняя граница
			thick: 3, // Толстая граница
		},
		borderRadius: {
			none: 0, // Без закруглений
			small: 5, // Маленькие закругления
			medium: 10, // Средние закругления
			large: 20, // Большие закругления
		},
		shadow: {
			shadowColor: "#000", // Цвет тени
			shadowOffset: { width: 0, height: 2 }, // Смещение тени
			shadowOpacity: 0.25, // Прозрачность тени
			shadowRadius: 3.84, // Радиус тени
			elevation: 5, // Высота тени для Android
		},
		margin: {
			small: 5, // Маленький отступ
			medium: 10, // Средний отступ
			large: 20, // Большой отступ
		},
		padding: {
			small: 5, // Маленький внутренний отступ
			medium: 10, // Средний внутренний отступ
			large: 20, // Большой внутренний отступ
		},
	},
});
